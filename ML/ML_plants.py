"""ML_on_plants.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uswy39FtJD618rxNZ3b6ZWVBtJV6DPDu
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from google.colab import files
import io
import seaborn as sns

from sklearn import datasets
iris=datasets.load_iris()

print(iris.DESCR)

print(type(iris.data))
iris.data[0:10]

"""Classification of data"""

iris.target

iris.data[0]

print("Keys: \n {}".format(iris.keys()))

uploaded = files.upload()
irisDF = pd.read_csv(io.BytesIO(uploaded['Iris.csv']))

"""150 samples, and 6 features"""

irisDF.shape

irisDF.columns

irisFeatures = irisDF.drop(['Species','Id'],axis=1)
display(irisFeatures)

irisTargets = irisDF['Species']
display(irisTargets)

#Look at a quick histogram of the values in the dataframe for sepal length:

for species in irisTargets.unique():
    plt.figure(1)
    iris_hist = irisFeatures['SepalLengthCm'].iloc[np.where(irisTargets == species)[0]].hist(bins=30)

# Sets title
iris_hist.set_title("Sepal Length")

#=labels
iris_hist.set_xlabel('Centimeters')
iris_hist.set_ylabel('Number of Samples')
iris_hist.legend(irisTargets.unique())

plt.show()

#Look at a quick histogram of the values in the dataframe for sepal length:
for species in irisTargets.unique():
    plt.figure(1)
    iris_hist = irisFeatures['SepalWidthCm'].iloc[np.where(irisTargets == species)[0]].hist(bins=30)

# Set title
iris_hist.set_title("Sepal Width")

# adding labels
iris_hist.set_xlabel('Centimeters')
iris_hist.set_ylabel('Number of Samples')
iris_hist.legend(irisTargets.unique())

plt.show()

corrMatrix = irisFeatures.corr()
sns.heatmap(corrMatrix, annot=True)
plt.show()

import seaborn as sns
sns.scatterplot(data=irisDF, x='SepalLengthCm', y='SepalWidthCm', hue=irisDF['Species'])
plt.show()

import seaborn as sns
sns.scatterplot(data=irisDF, x='PetalLengthCm', y='PetalWidthCm', hue=irisDF['Species'])
plt.show()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(irisFeatures, irisTargets,
test_size=0.25, random_state=1,shuffle = True, stratify = irisTargets)

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=3)

knn.fit(X_train, y_train)

y_pred = knn.predict(X_test)
print(y_pred)

print("Test set score: {:.9f}".format(knn.score(X_test, y_test)))

#if your data has a single feature or array.reshape(1, -1) if it contains a single sample.
print(irisFeatures.columns)
new_Iris = [[4.5,2.6,1.3,0.4]]

print(new_Iris)
prediction = knn.predict(new_Iris)
print("Prediction: {}".format(prediction))

new_Iris = [[5.0,2.6,5.3,1.9]]

print(new_Iris)
prediction = knn.predict(new_Iris)
print("Prediction: {}".format(prediction))